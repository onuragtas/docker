version: '3'
services:

  global:
    build: ./global
    tty: true
    container_name: global
    volumes:
      - ./global:/global
    networks:
      net:

  sentry:
    container_name: sentry
    image: sentry
    restart: always
    links:
      - redis
      - postgres
    ports:
      - ${SENTRY_PORT}:9000
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST}
    networks:
      net:
        ipv4_address: ${SENTRY_HOST}

  cron:
    container_name: sentry-cron
    image: sentry
    links:
      - redis
      - postgres
    command: "sentry run cron"
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST}
    networks:
      net:

  worker:
    container_name: sentry-worker
    image: sentry
    links:
      - redis
      - postgres
    command: "sentry run worker"
    environment:
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST}
    networks:
      net:

  rabbitmq:
    build: ./rabbitmq
    restart: always
    hostname: 'dev-rabbitmq'
    container_name: rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
      RABBITMQ_PLUGINS_DIR: "/opt/rabbitmq/plugins:/usr/lib/rabbitmq/plugins"
    ports:
      - ${RABBITMQ_PORT}:15672
      - ${RABBITMQ_PORT2}:5672
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq/mnesia
      #- ./rabbitmq_enabled_plugins:/etc/rabbitmq/enabled_plugins
      #- ./rabbitmq_plugins:/usr/lib/rabbitmq/plugins
    networks:
      net:
        ipv4_address: ${RABBITMQ_HOST}

  adminer:
    image: adminer
    restart: always
    container_name: adminer
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      net:
        ipv4_address: ${ADMINER_HOST}
    logging:
      options:
        max-size: 50m

  elasticsearch_graylog:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.3
    restart: always
    container_name: elasticsearch_graylog
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
#       Disable X-Pack security: https://www.elastic.co/guide/en/elasticsearch/reference/5.6/security-settings.htmlgeneral-security-settings
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${ELASTIC_GRAYLOG_DATA}:/bitnami/elasticsearch/data
    networks:
      net:
        ipv4_address: ${ELASTIC_GRAYLOG_HOST}
    ports:
      - ${ELASTIC_GRAYLOG_PORT}:9200

  hunspell:
    build: elastic/hunspell
    depends_on:
      - elasticsearch
    volumes:
      - hunspell-volume:/usr/share/elasticsearch/config/hunspell
    entrypoint: sh

  elasticsearch:
    build: ./elasticsearch
    restart: always
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-cluster
      - cluster.initial_master_nodes=elasticsearch
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./etc/elasticsearch/jvm.options:/usr/share/elasticsearch/config/jvm.options
    networks:
      net:
        ipv4_address: ${ELASTICSEARCH_HOST}
    ports:
      - ${ELASTICSEARCH_PORT}:9200

  kibana:
    container_name: kibana
    image: 'kibana:7.3.2'
    environment:
      - kibana.index=.kibana1
      - elasticsearch.hosts=[http://elasticsearch:9200, 172.16.16.113:10200]
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    links:
      - elasticsearch
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      net:
        ipv4_address: ${KIBANA_HOST}


  elastichq:
    container_name: elastichq
    image: elastichq/elasticsearch-hq
    restart: always
    environment:
      - HQ_DEFAULT_URL=${ELASTICHQ_DEFAULT_URL}
    ports:
      - ${ELASTICHQ_PORT}:5000
    networks:
      net:
        ipv4_address: ${ELASTICHQ_HOST}

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    build: ./redis-commander
    restart: always
    environment:
      - REDIS_HOST=172.28.1.4
      - REDIS_PASSWORD=redis
    ports:
       "8081:80"
    networks:
      net:
        ipv4_address: 172.28.1.9

  mongodb:
    image: mongo:4.2
    container_name: mongodb
    restart: always
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASS=${MONGODB_PASS}
    volumes:
      - './mongo/db:/data/db'
    ports:
      - ${MONGODB_PORT}:27017
    networks:
      net:
        ipv4_address: ${MONGODB_HOST}

  mongodb42:
      image: mongo:4.2
      container_name: mongodb42
      platform: linux/amd64
      restart: always
      environment:
        - MONGO_DATA_DIR=/data/db
        - MONGO_LOG_DIR=/dev/null
        - MONGODB_USER=${MONGODB_USER}
        - MONGODB_PASS=${MONGODB_PASS}
      volumes:
        - './mongo42/db:/data/db'
      ports:
        - ${MONGODB42_PORT}:27017
      networks:
        net:
          ipv4_address: ${MONGODB42_HOST}

  mongodb32:
      image: mongo:3.2
      container_name: mongodb32
      platform: linux/amd64
      restart: always
      environment:
        - MONGO_DATA_DIR=/data/db
        - MONGO_LOG_DIR=/dev/null
        - MONGODB_USER=${MONGODB_USER}
        - MONGODB_PASS=${MONGODB_PASS}
      volumes:
        - './mongo32/db:/data/db'
      ports:
        - ${MONGODB32_PORT}:27017
      networks:
        net:
          ipv4_address: ${MONGODB32_HOST}

  mongodb60:
      image: mongo:6.0
      container_name: mongodb60
      platform: linux/amd64
      restart: always
      environment:
        - MONGO_DATA_DIR=/data/db
        - MONGO_LOG_DIR=/dev/null
        - MONGODB_USER=${MONGODB_USER}
        - MONGODB_PASS=${MONGODB_PASS}
      volumes:
        - './mongo60/db:/data/db'
      ports:
        - ${MONGODB60_PORT}:27017
      networks:
        net:
          ipv4_address: ${MONGODB60_HOST}

  mongodb80:
      image: mongo:8.0
      container_name: mongodb80
      restart: always
      platform: linux/amd64
      environment:
        - MONGO_DATA_DIR=/data/db
        - MONGO_LOG_DIR=/dev/null
        - MONGODB_USER=${MONGODB_USER}
        - MONGODB_PASS=${MONGODB_PASS}
      volumes:
        - './mongo80/db:/data/db'
      ports:
        - ${MONGODB80_PORT}:27017
      networks:
        net:
          ipv4_address: ${MONGODB80_HOST}

  graylog:
    image: graylog/graylog:3.3.4-1
    restart: always
    container_name: graylog
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper  #Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_WEB_ENDPOINT_URI=${GRAYLOG_URL}api
      - GRAYLOG_HTTP_EXTERNAL_URI=${GRAYLOG_URL}
    links:
      - mongodb:mongo
      - elasticsearch_graylog:elasticsearch
    depends_on:
      - mongodb
      - elasticsearch_graylog
    ports:
      - ${GRAYLOG_PORT}:9000
      - 514:514
      - 514:514/udp
      - 12201:12201
      - 12201:12201/udp
    networks:
      net:
        ipv4_address: ${GRAYLOG_HOST}

  postgres:
    image: postgres:11
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - './postgres:/data/postgres'
    ports:
      - ${POSTGRES_PORT}:5432
    restart: always
    networks:
      net:
        ipv4_address: ${POSTGRES_HOST}


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - './pgadmin:/root/.pgadmin'
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    restart: always
    networks:
      net:
        ipv4_address: ${PGADMIN_HOST}


  node:
    image: node:latest
    container_name: node
    tty: true
    restart: always
    networks:
      net:
        ipv4_address: 172.28.1.5
    ports:
      - '3001:3001'


  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    networks:
      net:
        ipv4_address: ${REDIS_HOST}
    volumes:
      - './etc/redis.conf:/usr/local/etc/redis/redis.conf'
    environment:
      - REDIS_DEFAULT_PASSWORD=${REDIS_PASSWORD}
      - MASTER_DEFAULT_PASSWORD=${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379

  db:
    image: 'mysql:8.0.34'
    container_name: db
    restart: always
    networks:
      net:
        ipv4_address: ${MYSQL_HOST}
    volumes:
      - './mysql/initdb/:/docker-entrypoint-initdb.d'
      - './mysql/data/:/var/lib/mysql'
      - './etc/my.cnf:/etc/mysql/my.cnf'
    command: mysqld --sql_mode="NO_ENGINE_SUBSTITUTION"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_PORT}:3306


  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    networks:
      net:
        ipv4_address: ${PHPMYADMIN_HOST}
    environment:
      PMA_ARBITRARY: 1
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./php72/php.ini:/usr/local/etc/php/php.ini
    ports:
      - ${PHPMYADMIN_PORT}:80

  httpd:
    build: ./httpd
    platform: linux/amd64
    container_name: httpd
    restart: always
    tty: true
    networks:
      net:
        ipv4_address: ${APACHE_HOST}
    ports:
      - ${APACHE_PORT}:80
      - ${APACHE_PORT2}:443
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html
      - ${APACHE_SITES_ENABLED}:/etc/apache2/sites-enabled
      - ./httpd/apache2.conf:/etc/apache2/apache2.conf

  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    networks:
      net:
        ipv4_address: ${NGINX_HOST}
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_PORT2}:443
    volumes:
      - ${NGINX_CONF_PATH}:/etc/nginx/conf.d/
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - './logs/:/var/log/nginx/'
      - ${NGINX_SSL_PATH}:/root/Ssl/
      - './etc/nginx.conf/:/etc/nginx/nginx.conf'


  php72:
    image: onuragtas/php7.2-fpm
    tty: true
    container_name: php72
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_HOST: ${XDEBUG_HOST}
      XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php70:
    image: onuragtas/php7.0-fpm
    tty: true
    container_name: php70
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_HOST: ${XDEBUG_HOST}
      XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php74:
    image: onuragtas/php7.4-fpm
    tty: true
    container_name: php74
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_HOST: ${XDEBUG_HOST}
      XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php71:
    image: onuragtas/php7.1-fpm
    tty: true
    container_name: php71
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_HOST: ${XDEBUG_HOST}
      XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php56:
    image: onuragtas/php5.6-fpm
    tty: true
    container_name: php56
    restart: always
    links:
      - global
    environment:
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_HOST: ${XDEBUG_HOST}
      XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./global:/global
    networks:
      net:

  php71_xdebug:
    image: onuragtas/php7.1-fpm-xdebug
    tty: true
    container_name: php71_xdebug
    restart: always
    links:
      - global
    environment:
      XDEBUG_PORT: ${XDEBUG_PORT}
      XDEBUG_HOST: ${XDEBUG_HOST}
      XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
    expose:
      - 9000
    volumes:
      - ${PROJECT_DEFAULT_PATH}:/var/www/html/
      - ./php72/php.ini:/usr/local/etc/php/php.ini
      - ./global:/global
    networks:
      net:

  php72_xdebug:
      image: onuragtas/php7.2-fpm-xdebug
      tty: true
      container_name: php72_xdebug
      restart: always
      links:
        - global
      environment:
        XDEBUG_PORT: ${XDEBUG_PORT}
        XDEBUG_HOST: ${XDEBUG_HOST}
        XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
      expose:
        - 9000
      volumes:
        - ${PROJECT_DEFAULT_PATH}:/var/www/html/
        - ./php72/php.ini:/usr/local/etc/php/php.ini
        - ./global:/global
      networks:
        net:

  php72_xdebug_kurumsal:
      image: onuragtas/php7.2-fpm-xdebug-kurumsal
      tty: true
      container_name: php72_xdebug_kurumsal
      restart: always
      links:
        - global
      environment:
        XDEBUG_PORT: ${XDEBUG_PORT}
        XDEBUG_HOST: ${XDEBUG_HOST}
        XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
      expose:
        - 9000
      volumes:
        - ${PROJECT_DEFAULT_PATH}:/var/www/html/
        - ./php72_xdebug_kurumsal/php.ini:/usr/local/etc/php/php.ini
        - ./global:/global
      networks:
        net:

  php74_xdebug:
      image: onuragtas/php7.4-fpm-xdebug
      tty: true
      container_name: php74_xdebug
      restart: always
      links:
        - global
      environment:
        XDEBUG_PORT: ${XDEBUG_PORT}
        XDEBUG_HOST: ${XDEBUG_HOST}
        XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
      expose:
        - 9000
      volumes:
        - ./php74/php.ini:/usr/local/etc/php/php.ini
        - ${PROJECT_DEFAULT_PATH}:/var/www/html/
        - ./global:/global
      networks:
        net:

  php81_xdebug:
      image: hakanbaysal/php8.1-fpm-xdebug
      tty: true
      container_name: php81_xdebug
      restart: always
      links:
        - global
      environment:
        XDEBUG_PORT: ${XDEBUG_PORT}
        XDEBUG_HOST: ${XDEBUG_HOST}
        XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
      expose:
        - 9000
      volumes:
        - ./php81_xdebug/php.ini:/usr/local/etc/php/php.ini
        - ${PROJECT_DEFAULT_PATH}:/var/www/html/
        - ./global:/global
      networks:
        net:

  php56_xdebug:
      image: onuragtas/php5.6-fpm-xdebug
      tty: true
      container_name: php56_xdebug
      restart: always
      links:
        - global
      environment:
        XDEBUG_PORT: ${XDEBUG_PORT}
        XDEBUG_HOST: ${XDEBUG_HOST}
        XDEBUG_REMOTE_CONNECT_BACK: ${XDEBUG_REMOTE_CONNECT_BACK}
      expose:
        - 9000
      volumes:
        - ${PROJECT_DEFAULT_PATH}:/var/www/html/
        - ./global:/global
        - ./php56/php.ini:/usr/local/etc/php/php.ini
      networks:
        net:

  arangodb:
    image: arangodb:latest
    environment:
      ARANGO_ROOT_PASSWORD: FbJ9j8wF
    ports:
      - 8529:8529
    volumes:
      - ./arangodb_data_container:/var/lib/arangodb3
      - ./arangodb_apps_data_container:/var/lib/arangodb3-apps

  ftpserver:
    container_name: ftpserver
    image: iradu/proftpd:latest
    ports:
      - "21:21"
      - "20:20"
      - "31200-31239:31200-31239"
    volumes:
      - ${PROJECT_DEFAULT_PATH}/html:/home/ftpusers/ftpuser
    environment:
      FTP_USER_NAME: ftpuser
      FTP_USER_PASS: ftppass
      FTP_MAX_CONNECTIONS: 20
      FTP_MASQUERADEADDRESS: ${XDEBUG_HOST}
      FTP_PASSIVE_PORTS: "31200 31239"

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      net:

  kafka:
    container_name: kafka
    image: confluentinc/cp-enterprise-kafka:latest
    restart: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://192.168.36.240:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    ports:
      - "9092:9092"
    networks:
      net:

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - ${KAFDROP_PORT}:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=192.168.36.240:9092
    networks:
      net:

  sonarqube:
    image: sonarqube
    container_name: sonarqube
    depends_on:
      - postgres
    environment:
       SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqubedb
       SONAR_JDBC_USERNAME: postgres
       SONAR_JDBC_PASSWORD: postgres
    ports:
      - ${SONARQUBE_PORT}:9000
    restart: always
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_logs:/opt/sonarqube/logs
      - sonar_extensions:/opt/sonarqube/extensions
    networks:
      net:

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - "./etc/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - net
    ports:
      - ${PROMETHEUS_PORT}:9090

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - net
    ports:
      - ${GRAFANA_PORT}:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  keycloak:
    build: ./keycloak
    restart: on-failure:5
    container_name: keycloak
    volumes:
      - ./keycloak_data:/opt/keycloak/data
      - ./keycloak_providers:/opt/keycloak/providers
    environment:
      KC_LOG_LEVEL: debug
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HTTP_ENABLED: "true"
      HTTP_ADDRESS_FORWARDING: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    ports:
      - ${KEYCLOAK_PORT}:8080
    depends_on:
      - postgres

  ssh_ui:
    image: niruix/sshwifty:latest
    container_name: ssh_ui
    networks:
      - net
    ports:
      - 2222:8182
    restart: always

networks:
    net:
      ipam:
        driver: default
        config:
          - subnet: 172.28.0.0/16
volumes:
  sonar_data:
  sonar_logs:
  sonar_extensions:
  kafka-jmx-volume:
  grafana-volume:
  prometheus-volume:
  elasticsearch_data:
    driver: local
  global:
    driver: local
  zookeeper_log:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
